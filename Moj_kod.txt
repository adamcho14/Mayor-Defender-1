Rychlost miestnosti je nastavena na 30, t. j. jedna sekunda predstavuje 30 krokov
Snazil som sa vsetok kod pisat v "Create a piece of code", ostatne je pisane v zatvorkach "[", "]" a vysvetlene.

rm_Main (creation code):
// ak nehra hudba v pozadi, spusti ju
if(!audio_is_playing(snd_Background)) {
    audio_play_sound(snd_Background, 1, true);
}
// nastav vertikalny pohyb pozadia v tejto miestnosti na 2px/krok (t. j. pozadie sa pohybuje smerom nadol)
background_vspeed[0] = 2;
// pomocna premenna, oznacujuca koniec hry
ended = false;

rm_Game (creation code):
randomize();
// vytvorim dve instancie objektu obj_Enemy nad viditelnou castou obrazu
instance_create(random(200)+60, -200, obj_Enemy);
instance_create(random(200)+60, -400, obj_Enemy);
// vertikalny pohyb pozadia
background_vspeed[0] = 2;

obj_Bullet:
 * Create event:
// raz prehra zvuk snd_Pistol
audio_play_sound(snd_Pistol, 10, false);

 * Outside Room event:
// znici instanciu objektu obj_Bullet
instance_destroy();

obj_enmBullet - rovnako ako obj_Bullet (zabezpecuje aby sa nepriatelia nestrielali medzi sebou)

obj_End:
 * Create event:
// znici instancie objektu obj_Enemy
with(obj_Enemy) instance_destroy();
// zastavi pohyb pozadia
background_vspeed[0] = 0;
// nastavi premennu ended objektu obj_Sherif na true
with(obj_Sherif) ended = true;

 * Draw event:
// najprv vykresli seba
draw_self();
// vykresli hodnotu skore na poziciu x, y objectu obj_End s prefixom "Score:" (x, y nie su v strede, ani lavy horny roh, nastavenie vramci GameMaker, presna pozicia)
[Draw the value of score]

obj_Enemy:
 * Create event:
randomize();
// lokalna premenna shot oznacuje, ci dana instancia objektu uz vystrelila
var shot;
// shot nastavime na false
shot = false;
// premenna shoot_now oznacuje, kedy ma dana instancia vystrelit, nahodne vygenerujeme
shoot_now = random(200)+600;
// nastavim instancii vertikalnu rychlost 10px za krok
vspeed = 10;

 * Step event:
// ak uz ma strielat a este nevystrelil, tak vystreli (raz) objekt obj_enmBullet (aby sa nestrielali medzi sebou)
if ((y > shoot_now) && !shot) {
    with(instance_create(x, y, obj_enmBullet)) {
// nastavim smer na obj_Mayor, trochu vyssie, aby ho zasiahli tam, kde potom "krvaca"
        direction = point_direction(x, y, obj_Mayor.x, obj_Mayor.y - 50);
// nastavim rychlost na 30px za krok
        speed = 30;
    }
// uz vystrelil
    shot = true;
}

 * Collision with obj_Bullet event:
// zvysim skore
score += 10;
// prehram nahodne vybrany zvuk umierania
// irandom(n) je funkcia GML, ktora vrati hodnotu typu integer medzi 0 a n, vratane, t. j. 0, 1, ... ,n
n = irandom(4);
switch(n) {
    case 0: audio_play_sound(snd_Dead0, 10, false);
        break;
    case 1: audio_play_sound(snd_Dead1, 10, false);
        break;
    case 2: audio_play_sound(snd_Dead2, 10, false);
        break;
    case 3: audio_play_sound(snd_Dead3, 10, false);
        break;
    default: audio_play_sound(snd_Dead4, 10, false);
}
// znicim instanciu objektu other, co je instancia obj_Bullet, s ktorou sa zrazil
with(other) instance_destroy();
// zabranim vystrelu
shot = true;
// presuniem instanciu mimo miestnost
y = 1500;

 * Outside Room event:
// shot nastavim na false
shot = false;
randomize();
// znovu vygenerujem kedy ma vystrelit
shoot_now = random(200)+600;
// umiestnim ho do lavej alebo pravej polovice, tak aby nesiel stredom
temp = irandom(1);
if(temp == 0) x = random(270) + 20;
else x = random(300) + 440;
// y nastavim na -200, kedze ma nastaveny vspeed, tak zide dole
y = -200;

obj_Mayor:
 * Step event:
// ked sa animacia dostane na obrazok 33, zastavi sa
// animacia chodze ma 17 obrazkov, cize pocas tejto animacie sa nezastavi, az ked zmenime Sprite na spr_Death
if image_index == 33 then image_speed = 0;

 * Collision with obj_Bullet event:
// znici instanciu, s ktorou koliduje
with(other) instance_destroy();
// vytvori instanciu objektu obj_end
instance_create(290, 568, obj_end);
// zmeni sprite na spr_death
sprite_index = spr_death;
// spusti zvuk umierania
audio_play_sound(snd_Dead1, 10, false);
// zastavi animaciu serifa
with(obj_Sherif) image_speed = 0;

 * Collision with obj_enmBullet event - rovnako ako pre obj_Bullet

obj_Play:
 * Left Button event:
room_goto(rm_Game);

obj_Quit:
 * Left Button event:
game_end();

obj_Score:
 * Create event:
// set score value to 0
score = 0;
// counter of bonus enemies
i = 1;
// sets score font to f_score
draw_set_font(f_score);

 * Step event:
// pri kazdej stovke zvysim pocet nepriatelov o 1
if(score == i*100) {
    i++;
    instance_create(100, 1500, obj_Enemy);
}

 * Draw event:
// vykresli hodnotu skore na poziciu x = 10, y = 5 s prefixom "Score:"
[Draw the value of score]

obj_Sherif:
 * Create event:
// nastavi premennu ended na false (hra este neskocila)
ended = false;

 * Collision with obj_Wall event:
// zastavi pohyb serifa
speed = 0;
// znici instanciu, s ktorou sa zrazil, t. j. stenu vytvorenu pri zaciatku pohybu
with(other) instance_destroy();

 * Global Left Pressed event:
// ak hra skoncila presunieme sa do uvodnej miestnosti
if(ended) {
    room_goto(rm_Main);
}
// ak este neskoncila
else {
// ak sme tukli v hornej casti miestnosti
    if(mouse_y < 1020) {
// vytvor instanciu objektu obj_Bullet
        with(instance_create(x, y, obj_Bullet)) {
// nastav tejto instancii smer a rychlost
            direction = point_direction(x, y, mouse_x, mouse_y);
            speed = 90;
        }
    }
// ak v dolnej casti obrazovky
    else {
// znic pripadne existujuce instancie pomocneho objektu obj_wall
        with(obj_Wall) instance_destroy();
// vytvor instanciu objektu obj_wall 15px od miesta tuknutia (sirka serifa je priblizne 30px)
        if(mouse_x > x) temp_x = mouse_x + 15;
        else temp_x = mouse_x - 15;
        instance_create(temp_x, y, obj_Wall);
// nastavim smer serifovho pohybu vodorovne k novovytvorenej instancii
        direction = point_direction(x, y, mouse_x, y);
// nastavim rychlost serifovho pohybu na 5px/krok
        speed = 5;
    }
}

obj_Star - zatial nema ziadnu funkcionalitu (planovany vypis Highscore)

obj_Wall (pomocny, neviditelny objekt na zastavenie pohybu serifa):
 * Collision with obj_sherif event:
// znici instanciu objektu obj_Wall
instance_destroy();